#!/bin/bash -e

test -f ~/.r2d2 && source ~/.r2d2

usage() {
cat $(readlink -f $(dirname $0))/README.md
}

verbose="-v warning"
nonfree=1
mixer="90%"
while getopts "o:d:vhu:c:nrm" o
do
	case "$o" in
	(n) nonfree=0;;
	(m) mixer="";;
	(d) duration="-t $OPTARG";;
	(\?) echo "Invalid option: -$OPTARG" >&2 ;;
	(h) usage; exit;;
	(v) verbose="";; # funnily ffmpeg is verbose by default
	(r) raw=true;;
	(*) break;;
	esac
done
shift $((OPTIND - 1))
today="$(date --iso-8601=date)"
mkdir "$today" &>/dev/null || true

out="$today/$(basename "${1:-out.webm}" | tr ' ' _)"
if test "${out##*.}" != "webm"; then out="${out%.*}.webm"; fi

if test -f "$out"
then
	echo -e "\033[1;34m$0\033[m $out already exists"
	exit
fi

log="${out%.*}.log"
test "$nonfree" -gt 0 && mp4="${out%.*}.mp4"

if test -f "$1"
then
	temp="$1"
else
	temp="$(basename $out .webm).mkv"
fi

test "$verbose" || echo -e "\033[1;34m$0\033[m $temp"

# Set a sane recording volume
if test "$mixer"
then
	amixer set "Capture" "$mixer"
	test "$verbose" || echo -e "\033[1;34m$0\033[m Set recording volume to $mixer"
fi

echo -e "\033[1;34m$0\033[m saving progress to $log"
test "$duration" || ! test -f "$1" && echo -e "\033[1;34m$0\033[m Type q then enter to end your screencast"

(
test "$verbose" || set -x

# Only create RAW file if one does not exist
if ! test -f "$temp"
then
	res="$(xdpyinfo | awk '/dimensions:/ { print $2; exit }')"
	echo -e "\033[1;34m$0\033[m Capturing $res"
	ffmpeg $verbose $duration -f x11grab -s $res -r 24 -i :0.0 -f alsa -i hw:0,0 -acodec pcm_s16le -vcodec ffvhuff $temp
fi

# quit if we just wanted the raw file
test "$raw" && exit

test "$mp4" &&
echo -e "\033[1;34m$0\033[m encoding $mp4 for Apple IOS Safari" &&
if ! ffmpeg $verbose -y -i "$temp" -movflags +faststart -c:v libx264 $t -vpre ipod640 -acodec libfaac $mp4
then
	echo -e "\033[1;31m$0\033[m you need to recompile ffmpeg to enable non-free libfaac :( https://bugs.archlinux.org/task/27465"
fi
echo -e "\033[1;34m$0\033[m encoding $out for everything else"
time ffmpeg $verbose -y -i "$temp" -c:a libvorbis -q:a 7 -c:v libvpx -crf 24 -b:v 1000k $t "$out") 2>&1 | tee -a "$log"

# Clear up temp.mkv, only if there is at least an output file
if ! test -f "$out" && test -f "$temp"
then
	echo -e "\033[1;34m$0\033[m created RAW file $temp"
	exit
fi

# Generate HTML source
html="${out%.*}.html"
echo "<video controls width=640 height=360 controls>" > $html
test -f "$mp4" && echo "<source src=$(basename $mp4) type=video/mp4>" >> $html
cat <<END >> $html
<source src="$(basename $out)" type="video/webm">
</video><pre>
END

eval $(ffprobe -v 0 -of flat=s=_ -show_format $out) # neat trick to get video variables into shell

test -f "$mp4" && ffprobe -v warning -show_format $mp4 >> $html
ffprobe -v warning -show_format $out >> $html
echo "</pre><p><a href=$(basename $log)>ffmpeg logfile</a></p><p><a href=https://github.com/kaihendry/recordmydesktop2.0/blob/master/r2d2.sh>r2d2.sh source</a></p>" >> $html

echo -e "\033[1;34m$0\033[m wrote $(du -h $out) $(test -f "$mp4" && du -h $mp4) $(test "$format_duration" && echo duration: $format_duration seconds)"
echo -e "\033[1;34m$0\033[m compressed $(du -h $temp) to $(du -h $out), $(du -m $temp $out | awk 't{printf("%.0f\n",100*$1/t)}{t=$1}')% of size"

if test "$dest"
then
	echo rsync -r --progress --remove-source-files $today $dest
	echo -e "\n\033[1;34m$0\033[m SHARE URL: http://$(basename $dest)/$html\n"
fi
